server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name _;
	return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name tls130rtt.test.nlnetlabs.tk;

    ssl_certificate /etc/ssl/certs/wildcard.test.nlnetlabs.tk.crt;
    ssl_certificate_key /etc/ssl/private/wildcard.test.nlnetlabs.tk.key;
    ssl_protocols TLSv1.3;

    # We fetch the OCSP responder certificate manually in run-nginx-server.sh
    # rather than have NGINX contact the OCSP responder itself. This is because
    # NGINX doesn't pre-fetch the responder cert and so can reply to clients
    # without an OCSP stapled response, which we don't want.
    # See: https://blog.apnic.net/2019/01/15/is-the-web-ready-for-ocsp-must-staple/
    # See: https://raymii.org/s/articles/OpenSSL_Manually_Verify_a_certificate_against_an_OCSP.html
    ssl_stapling on;
    #ssl_stapling_verify on;
    #ssl_trusted_certificate /opt/ca-ocsp/ca/rootCA.crt;
    ssl_stapling_file /etc/ssl/certs/ocsp_responses/wildcard.test.nlnetlabs.tk.der;

    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;" always;

    # Respond with the correct headers to make the Internet.nl "Security
    # options" tests pass.
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Content-Security-Policy "frame-ancestors; default-src https;" always;
    add_header Referrer-Policy "no-referrer" always;

    # Disable response compression otherwise the Internet.nl "HTTP Compression"
    # test fails.
    gzip off;

    ssl_early_data on;

    location / {
        root   /var/www/html;
        index  index.nginx-debian.html;
    }
}