# This Docker Compose file deploys the Internet.nl application on a private
# closed network, runs a suite of integration tests against it by driving a
# browser as an end user would, produces a test report and shuts down.
#
# It works by creating a mini closed Internet clone to test against including
# DNS root, TLD and domain servers and target servers to test. The network is
# closed to ensure that tests do not run against any external dependencies and
# so that the conditions of the test can be completely controlled.
#
# Tested on Ubuntu 19.04 with Docker 18.09.l5 and docker-compose 1.24.0.
# You will need to add "ipv6" and "fixed-cidr-v6" entries to your Docker
# daemon.json file and restart the Docker daemon, e.g.:
#   $ cat /etc/docker/daemon.json
#   {
#       "ipv6": true,
#       "fixed-cidr-v6": "2001:3984:3989::/64"
#   }
#   $ sudo service docker restart
#
# To build everything in advance:
#   docker-compose build --parallel
#
# To deploy with no prior volume state:
#   docker-compose up -V
#
# To teardown everything when the tests complete:
#   docker-compose up -V --exit-code-from testrunner
#
# To log only the testrunner output:
#   docker-compose up -V -d && echo waiting ... && docker logs -t -f testrunner && echo tearing down ... && docker-compose kill

# 2.1 required for 'enable_ipv6'
# 2.2 required for 'build: network:'
# 2.3 required for 'healthcheck: start_period'
version: '2.3'

services:
  # --------------------------------------------------------------------------
  #      A CONTAINER FOR ORCHESTRATING THE CONFIGURATION OF THE DEPLOYED
  #           INFRASTRUCTURE AND FOR EXECUTING THE TEST SUITE.
  # --------------------------------------------------------------------------
  testrunner:
    build:
      context: testrunner
      network: host
    tmpfs: /tmp
    volumes:
      # Allow the testrunner to execute Docker commands on the other containers
      - "/var/run/docker.sock:/var/run/docker.sock"
    dns: ${RESOLVER_IP}
    networks:
      test_net:
    depends_on:
      - resolver
      - app
    environment:
      - COMPOSE_PROJECT_NAME
      - NUM_BROWSER_NODES
      - TEST_SELECTOR
      - TEST_MAX_FAIL
      - ROOT_IP
      - MASTER_IP
      - RESOLVER_IP
      - ENABLE_COVERAGE


  # --------------------------------------------------------------------------
  #      THE INTERNET.NL APPLICATION WEB SERVER AGAINST WHICH TESTS WILL
  #                                  BE EXECUTED
  # --------------------------------------------------------------------------
  app:
    build:
      context: ../..
      dockerfile: docker/it/app/Dockerfile
      network: host
      args:
        - BASE_IMAGE
    volumes:
      # Allow the developer to launch a browser in the container using the host X server
      # Example usage:
      #   $ docker-compose exec app bash -c 'apt-get update && apt-get install -y firefox'
      #   $ xhost +
      #   $ docker-compose exec app firefox
      # The 'xhost +' disables X11 security to workaround "Error: cannot open
      # display :0' when running firefox (or running any command in the Docker
      # container that attempts to communicate with the host X11 server)
      - "/tmp/.X11-unix:/tmp/.X11-unix"
      # Allow the test run report to be written to the host machine
      - "/tmp/it-report:/tmp/it-report"
    # Prevent crashes when running a browser in the container using the host X server
    shm_size: 2G
    # Note: /etc/resolv.conf will show nameserver 127.0.0.11. This is the Docker embedded DNS
    # server, which in turn will use the value provided by dns: ${RESOLVER_IP} here.
    # See: https://docs.docker.com/v17.09/engine/userguide/networking/configure-dns/
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${APP_IP}
        ipv6_address: ${APP_IPV6}
    depends_on:
      - appbase
      - redis
      - rabbitmq
      - postgres
      - resolver
    environment:
      - LDNS_DANE_VALIDATION_DOMAIN=tls12only.test.nlnetlabs.tk
      # setting CACHE_TTL (seconds) too low (e.g. to 1) causes test failures because the
      # Javascript retries run out before the probes complete.
      - CACHE_TTL=200
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - POSTGRES_HOST=postgres
      - RESOLVER_IP
      - ROOT_IP
      - ROOT_IPV6
      # Allow the developer to launch a browser in teh container using the host X server
      - DISPLAY
      # Environment variables that influence integration test behaviour
      - IT_BROWSER_WIDTH
      - IT_BROWSER_HEIGHT
      - ENABLE_COVERAGE
      - TEST_SELECTOR
    ports:
      - "8080:8080"
      - "5555:5555"


  # --------------------------------------------------------------------------
  #   A SELENIUM GRID TO SUPPORT BROWSER BASED TESTING OF THE INTERNET.NL
  #                             CONTAINER ABOVE.
  # --------------------------------------------------------------------------
  selenium-firefox:
    image: selenium/node-firefox:3.141.59-palladium
    scale: ${NUM_BROWSER_NODES}
    # Prevent crashes when running a browser in the container.
    # See: https://github.com/SeleniumHQ/docker-selenium
    shm_size: 2G
    dns: ${RESOLVER_IP}
    networks:
      test_net:
    depends_on:
      - selenium
    environment:
      - HUB_HOST=selenium
      - NODE_MAX_INSTANCES=2
      - NODE_MAX_SESSION=1

  # Selenium Grid Hub: Browse to http://localhost:4444/grid/console
  selenium:
    image: selenium/hub:3.141.59-palladium
    dns: ${RESOLVER_IP}
    networks:
      test_net:
    depends_on:
      - resolver
    ports:
      - "4444:4444"

  # --------------------------------------------------------------------------
  #   REDIS, RABBITMQ, AND POSTGRES SUPPORT SERVERS NEEDED BY INTERNET.NL.
  # --------------------------------------------------------------------------
  redis:
    image: redis:alpine
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${REDIS_IP}
        ipv6_address: ${REDIS_IPV6}

  rabbitmq:
    image: rabbitmq:management-alpine
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${RABBITMQ_IP}
        ipv6_address: ${RABBITMQ_IPV6}
    ports:
      - "15672:15672"

  postgres:
    image: postgres:alpine
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${POSTGRES_IP}
        ipv6_address: ${POSTGRES_IPV6}
    environment:
      - POSTGRES_USER=internetnl
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=internetnl_db1


  # --------------------------------------------------------------------------
  #  A CERTIFICATE AUTHORITY AND OCSP SERVER FOR ISSUING SIGNED CERTIFICATES
  #                      TO THE TARGET SERVERS BELOW
  # --------------------------------------------------------------------------
  ca_ocsp:
    image: targetbase
    dns: ${RESOLVER_IP}
    entrypoint: /opt/ca-ocsp/run-server.sh
    networks:
      test_net:
        ipv4_address: ${TARGET_CA_OCSP_IP}
        ipv6_address: ${TARGET_CA_OCSP_IPV6}
    depends_on:
      - targetbase


  # --------------------------------------------------------------------------
  #    TARGET SERVERS OF VARIOUS FLAVOURS AND CONFIGURATION FOR CONNECTING
  #                   TO FROM THE INTERNET.NL APPLICATION.
  # --------------------------------------------------------------------------


  targettls10only:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS10ONLY_IP}
        ipv6_address: ${TARGET_TLS10ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls10only
      - APACHE_MODULES=ssl

  targettls10onlyclientcipherorder:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS10ONLYCLIENTCIPHERORDER_IP}
        ipv6_address: ${TARGET_TLS10ONLYCLIENTCIPHERORDER_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls10onlyclientcipherorder
      - APACHE_MODULES=ssl

  targettls11only:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS11ONLY_IP}
        ipv6_address: ${TARGET_TLS11ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls11only
      - APACHE_MODULES=ssl

  targettls1011:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS1011_IP}
        ipv6_address: ${TARGET_TLS1011_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls1011
      - APACHE_MODULES=ssl

  targettls1112:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS1112_IP}
        ipv6_address: ${TARGET_TLS1112_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls1112
      - APACHE_MODULES=ssl

  targettls12only:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS12ONLY_IP}
        ipv6_address: ${TARGET_TLS12ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls12only
      - APACHE_MODULES=ssl
      - POSTFIX_VERSION=custom-legacy
      - POSTFIX_CONFIG=tls12only

  targettls12onlylegacybadciphers:
    image: targetbase
    # Tested with:
    #   KEY=/etc/ssl/private/wildcard.test.nlnetlabs.tk.key
    #   CERT=/etc/ssl/certs/wildcard.test.nlnetlabs.tk.crt
    #   CAFILE=/opt/ca-ocsp/ca/rootCA.crt
    #   OPENSSL=/opt/openssl-old/bin/openssl
    # Where:
    #   $ $OPENSSL version
    #   OpenSSL 1.0.2e 3 Dec 2015
    #
    # NULL:
    #   $ $OPENSSL s_server -accept 4433 -key $KEY -cert $CERT -CAfile $CAFILE -cipher NULL
    #   $ $OPENSSL s_client </dev/null -connect localhost:4433
    #   SSL-Session:
    #       Protocol  : TLSv1.2
    #       Cipher    : ECDHE-RSA-NULL-SHA
    #
    # RC4:
    #   $ $OPENSSL s_server -accept 4433 -key $KEY -cert $CERT -CAfile $CAFILE -cipher RC4
    #   $ $OPENSSL s_client </dev/null -connect localhost:4433
    #   SSL-Session:
    #       Protocol  : TLSv1.2
    #       Cipher    : ECDHE-RSA-RC4-SHA
    #
    # DES:
    #   $ $OPENSSL s_server -accept 4433 -key $KEY -cert $CERT -CAfile $CAFILE -cipher DES
    #   $ $OPENSSL s_client </dev/null -connect localhost:4433
    #   SSL-Session:
    #       Protocol  : TLSv1.2
    #       Cipher    : EDH-RSA-DES-CBC-SHA
    #
    # IDEA:
    #   $ $OPENSSL s_server -accept 4433 -key $KEY -cert $CERT -CAfile $CAFILE -cipher IDEA
    #   $ $OPENSSL s_client </dev/null -connect localhost:4433
    #   SSL-Session:
    #       Protocol  : TLSv1.2
    #       Cipher    : IDEA-CBC-SHA
    #
    # 3DES-CBC:
    #   $ $OPENSSL s_server -accept 4433 -key $KEY -cert $CERT -CAfile $CAFILE -cipher 3DES
    #   $ $OPENSSL s_client </dev/null -connect localhost:4433
    #   SSL-Session:
    #       Protocol  : TLSv1.2
    #       Cipher    : ECDHE-RSA-DES-CBC3-SHA
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS12ONLYLEGACYBADCIPHERS_IP}
        ipv6_address: ${TARGET_TLS12ONLYLEGACYBADCIPHERS_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_VERSION=custom-legacy
      - APACHE_SITES=http-with-ssl-redirect tls12onlylegacybadciphers

  targettls12onlymodernbadciphers:
    image: targetbase
    # Tested with:
    #   KEY=/etc/ssl/private/wildcard.test.nlnetlabs.tk.key
    #   CERT=/etc/ssl/certs/wildcard.test.nlnetlabs.tk.crt
    #   CAFILE=/opt/ca-ocsp/ca/rootCA.crt
    #   OPENSSL=openssl
    # Where:
    #   $ $OPENSSL version
    #   OpenSSL 1.1.1b  26 Feb 2019
    #
    # AESCCM8: (note: only works if -cipher is passed to s_client)
    #   $ $OPENSSL s_server -accept 4433 -key $KEY -cert $CERT -CAfile $CAFILE -cipher AESCCM8
    #   $ $OPENSSL s_client </dev/null -connect localhost:4433 -cipher DHE-RSA-AES256-CCM8
    #   SSL-Session:
    #       Protocol  : TLSv1.2
    #       Cipher    : DHE-RSA-AES256-CCM8
    #   $ $OPENSSL s_client </dev/null -connect localhost:4433 -cipher DHE-RSA-AES128-CCM8
    #   SSL-Session:
    #       Protocol  : TLSv1.2
    #       Cipher    : DHE-RSA-AES128-CCM8
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS12ONLYMODERNBADCIPHERS_IP}
        ipv6_address: ${TARGET_TLS12ONLYMODERNBADCIPHERS_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls12onlymodernbadciphers
      - APACHE_MODULES=ssl

  # For use with DebugConnection/LegacySslClient (OpenSSL 1.1.1 based)
  targettls12onlylegacyphaseoutciphers:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS12ONLYLEGACYPHASEOUTCIPHERS_IP}
        ipv6_address: ${TARGET_TLS12ONLYLEGACYPHASEOUTCIPHERS_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_VERSION=custom-legacy
      - APACHE_SITES=http-with-ssl-redirect tls12onlylegacyphaseoutciphers
      - APACHE_MODULES=ssl

  # For use with ModernConnection/SslClient (OpenSSL 1.1.1 based)
  targettls12onlymodernphaseoutciphers:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS12ONLYMODERNPHASEOUTCIPHERS_IP}
        ipv6_address: ${TARGET_TLS12ONLYMODERNPHASEOUTCIPHERS_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls12onlymodernphaseoutciphers
      - APACHE_MODULES=ssl

  # To sanity check, exec on this container:
  #   $ echo | openssl s_client -connect localhost:443 2>&1 | fgrep "Secure Renegotiation"
  #   Secure Renegotiation IS NOT supported
  targettls10onlyinsecurereneg:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS10ONLYINSECURERENEG_IP}
        ipv6_address: ${TARGET_TLS10ONLYINSECURERENEG_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_VERSION=custom-ancient
      - APACHE_SITES=http-with-ssl-redirect tls10onlyinsecurereneg
      - APACHE_MODULES=ssl

  targettls1213:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS1213_IP}
        ipv6_address: ${TARGET_TLS1213_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls1213
      - APACHE_MODULES=ssl

  # To sanity check, exec on this container:
  #   $ echo | LD_LIBRARY_PATH=/opt/openssl-modern/lib /opt/openssl-modern/bin/openssl s_client -comp -tls1_2 -connect localhost:443 2>&1 | fgrep Compression
  #   Compression: zlib compression
  #       Compression: 1 (zlib compression)
  targettls1213tlscompression:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS1213TLSCOMPRESSION_IP}
        ipv6_address: ${TARGET_TLS1213TLSCOMPRESSION_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_VERSION=custom-modern
      - APACHE_SITES=http-with-ssl-redirect tls1213tlscompression
      - APACHE_MODULES=ssl

  targettls13only:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS13ONLY_IP}
        ipv6_address: ${TARGET_TLS13ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls13only
      - APACHE_MODULES=ssl
      - POSTFIX_VERSION=custom-modern
      - POSTFIX_CONFIG=tls13only

  targettls1213prioritizechacha:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS1213PRIORITIZECHACHA_IP}
        ipv6_address: ${TARGET_TLS1213PRIORITIZECHACHA_IPV6}
    depends_on:
      - targetbase
    environment:
      - POSTFIX_VERSION=custom-modern
      - POSTFIX_CONFIG=tls1213prioritizechacha

  targettls130rtt:
    image: targetbase
    entrypoint: /opt/run-nginx-server.sh
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS130RTT_IP}
        ipv6_address: ${TARGET_TLS130RTT_IPV6}
    depends_on:
      - targetbase
    environment:
      - NGINX_SITES=nginx-0rtt
      - POSTFIX_VERSION=custom-modern
      - POSTFIX_CONFIG=tls13only

  targettls13invalidocsp:
    image: targetbase
    entrypoint: /opt/run-nginx-server.sh
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS13INVALIDOCSP_IP}
        ipv6_address: ${TARGET_TLS13INVALIDOCSP_IPV6}
    depends_on:
      - targetbase
    environment:
      - NGINX_SITES=nginx-invalidocsp

  targettls13onlyclientcipherorder:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS13ONLYCLIENTCIPHERORDER_IP}
        ipv6_address: ${TARGET_TLS13ONLYCLIENTCIPHERORDER_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect tls13onlyclientcipherorder
      - APACHE_MODULES=ssl

  targettls13onlydiffipv4ipv6:
    image: targetbase
    command: /opt/jinjify.sh /etc/apache2/sites-available/tls13onlydiffipv4ipv6.conf
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS13ONLYDIFFIPV4IPV6_IP}
        ipv6_address: ${TARGET_TLS13ONLYDIFFIPV4IPV6_IPV6}
    depends_on:
      - targetbase
    environment:
      - TARGET_TLS13ONLYDIFFIPV4IPV6_IP
      - TARGET_TLS13ONLYDIFFIPV4IPV6_IPV6
      - WAIT_FOR_CUSTOM_COMMAND=yes
      - APACHE_SITES=http-with-ssl-redirect tls13onlydiffipv4ipv6
      - APACHE_MODULES=ssl
      - POSTFIX_VERSION=custom-modern
      - POSTFIX_CONFIG=tls13ipv4only

  targettls13onlyipv4only:
    image: targetbase
    entrypoint: /opt/run-nginx-server.sh
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS13ONLYIPV4ONLY_IP}
        ipv6_address: ${TARGET_TLS13ONLYIPV4ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - NGINX_SITES=nginx-ipv4only
      - POSTFIX_VERSION=custom-modern
      - POSTFIX_CONFIG=tls13ipv4only

  targettls13onlyipv6only:
    image: targetbase
    entrypoint: /opt/run-nginx-server.sh
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_TLS13ONLYIPV6ONLY_IP}
        ipv6_address: ${TARGET_TLS13ONLYIPV6ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - NGINX_SITES=nginx-ipv4only
      - POSTFIX_VERSION=custom-modern
      - POSTFIX_CONFIG=tls13ipv6only

  targetssl2only:
    image: targetbase
    command: /opt/run-openssl-server.sh -ssl2 -dhparam /etc/ssl/certs/dh_params/ffdhe4096.txt
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_SSL2ONLY_IP}
        ipv6_address: ${TARGET_SSL2ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect

  targetssl3only:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_SSL3ONLY_IP}
        ipv6_address: ${TARGET_SSL3ONLY_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-with-ssl-redirect ssl3only
      - APACHE_VERSION=custom-ancient
      - APACHE_MODULES=ssl

  targetnossl:
    image: targetbase
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${TARGET_NOSSL_IP}
        ipv6_address: ${TARGET_NOSSL_IPV6}
    depends_on:
      - targetbase
    environment:
      - APACHE_SITES=http-only


  # --------------------------------------------------------------------------
  #     DNS INFRASTRUCTURE: ROOT, TK, NLNETLABS.TK AND TEST.NLNETLABS.TK
  #   AND AN UNBOUND RESOLVER WITH MODIFIED ROOT HINTS AND DNSSEC ROOT KEY
  # --------------------------------------------------------------------------


  # An unbound DNS resolver container that is configured to get root hints
  # from 'root' (defined below).
  resolver:
    build:
      context: dns/resolver
      network: host
    tmpfs: /tmp
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${RESOLVER_IP}
        ipv6_address: ${RESOLVER_IPV6}
    depends_on:
      - submaster
      - master
      - root
      - devbase
    environment:
      - OWN_IP=${RESOLVER_IP}
      - ROOT_IPV6
      - ROOT_IP
      - SUBNETV4
      - TARGET_TLS1213_IP

  # An NSD authoratitive container responsible for the nlnetlabs.tk. zone
  submaster:
    build:
      context: dns/submaster
      network: host
    tmpfs: /tmp
    dns: ${RESOLVER_IP}
    volumes:
      # Allow the container to execute Docker commands on the parent container to publish a DS record
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      test_net:
        ipv4_address: ${SUB_MASTER_IP}
        ipv6_address: ${SUB_MASTER_IPV6}
    depends_on:
      - nsdbase
      - master
    environment:
      - OWN_IP=${SUB_MASTER_IP}
      - APP_IP=${APP_IP}
      - APP_IPV6=${APP_IPV6}
      - TARGET_CA_OCSP_IP
      - TARGET_CA_OCSP_IPV6
      - TARGET_NOSSL_IP
      - TARGET_NOSSL_IPV6
      - TARGET_SSL2ONLY_IP
      - TARGET_SSL2ONLY_IPV6
      - TARGET_SSL3ONLY_IP
      - TARGET_SSL3ONLY_IPV6
      - TARGET_TLS10ONLY_IP
      - TARGET_TLS10ONLY_IPV6
      - TARGET_TLS10ONLYCLIENTCIPHERORDER_IP
      - TARGET_TLS10ONLYCLIENTCIPHERORDER_IPV6
      - TARGET_TLS10ONLYINSECURERENEG_IP
      - TARGET_TLS10ONLYINSECURERENEG_IPV6
      - TARGET_TLS1011_IP
      - TARGET_TLS1011_IPV6
      - TARGET_TLS11ONLY_IP
      - TARGET_TLS11ONLY_IPV6
      - TARGET_TLS1112_IP
      - TARGET_TLS1112_IPV6
      - TARGET_TLS12ONLY_IP
      - TARGET_TLS12ONLY_IPV6
      - TARGET_TLS1213PRIORITIZECHACHA_IP
      - TARGET_TLS1213PRIORITIZECHACHA_IPV6
      - TARGET_TLS12ONLYLEGACYBADCIPHERS_IP
      - TARGET_TLS12ONLYLEGACYBADCIPHERS_IPV6
      - TARGET_TLS12ONLYMODERNBADCIPHERS_IP
      - TARGET_TLS12ONLYMODERNBADCIPHERS_IPV6
      - TARGET_TLS12ONLYLEGACYPHASEOUTCIPHERS_IP
      - TARGET_TLS12ONLYLEGACYPHASEOUTCIPHERS_IPV6
      - TARGET_TLS12ONLYMODERNPHASEOUTCIPHERS_IP
      - TARGET_TLS12ONLYMODERNPHASEOUTCIPHERS_IPV6
      - TARGET_TLS13ONLYDIFFIPV4IPV6_IP
      - TARGET_TLS13ONLYDIFFIPV4IPV6_IPV6
      - TARGET_TLS13ONLYCLIENTCIPHERORDER_IP
      - TARGET_TLS13ONLYCLIENTCIPHERORDER_IPV6
      - TARGET_TLS1213_IP
      - TARGET_TLS1213_IPV6
      - TARGET_TLS1213TLSCOMPRESSION_IP
      - TARGET_TLS1213TLSCOMPRESSION_IPV6
      - TARGET_TLS13ONLY_IP
      - TARGET_TLS13ONLY_IPV6
      - TARGET_TLS130RTT_IP
      - TARGET_TLS130RTT_IPV6
      - TARGET_TLS13INVALIDOCSP_IP
      - TARGET_TLS13INVALIDOCSP_IPV6
      - TARGET_TLS13ONLYIPV4ONLY_IP
      - TARGET_TLS13ONLYIPV4ONLY_IPV6
      - TARGET_TLS13ONLYIPV6ONLY_IP
      - TARGET_TLS13ONLYIPV6ONLY_IPV6
  submaster2:
    build:
      context: dns/submaster
      network: host
    tmpfs: /tmp
    dns: ${RESOLVER_IP}
    volumes:
      # Allow the container to execute Docker commands on the parent container to publish a DS record
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      test_net:
        ipv4_address: ${SUB_MASTER2_IP}
        ipv6_address: ${SUB_MASTER2_IPV6}
    depends_on:
      - nsdbase
      - master
    environment:
      - OWN_IP=${SUB_MASTER2_IP}
      - APP_IP=${APP_IP}
      - APP_IPV6=${APP_IPV6}
      - TARGET_CA_OCSP_IP
      - TARGET_CA_OCSP_IPV6
      - TARGET_NOSSL_IP
      - TARGET_NOSSL_IPV6
      - TARGET_SSL2ONLY_IP
      - TARGET_SSL2ONLY_IPV6
      - TARGET_SSL3ONLY_IP
      - TARGET_SSL3ONLY_IPV6
      - TARGET_TLS10ONLY_IP
      - TARGET_TLS10ONLY_IPV6
      - TARGET_TLS10ONLYCLIENTCIPHERORDER_IP
      - TARGET_TLS10ONLYCLIENTCIPHERORDER_IPV6
      - TARGET_TLS10ONLYINSECURERENEG_IP
      - TARGET_TLS10ONLYINSECURERENEG_IPV6
      - TARGET_TLS1011_IP
      - TARGET_TLS1011_IPV6
      - TARGET_TLS11ONLY_IP
      - TARGET_TLS11ONLY_IPV6
      - TARGET_TLS1112_IP
      - TARGET_TLS1112_IPV6
      - TARGET_TLS12ONLY_IP
      - TARGET_TLS12ONLY_IPV6
      - TARGET_TLS1213PRIORITIZECHACHA_IP
      - TARGET_TLS1213PRIORITIZECHACHA_IPV6
      - TARGET_TLS12ONLYLEGACYBADCIPHERS_IP
      - TARGET_TLS12ONLYLEGACYBADCIPHERS_IPV6
      - TARGET_TLS12ONLYMODERNBADCIPHERS_IP
      - TARGET_TLS12ONLYMODERNBADCIPHERS_IPV6
      - TARGET_TLS12ONLYLEGACYPHASEOUTCIPHERS_IP
      - TARGET_TLS12ONLYLEGACYPHASEOUTCIPHERS_IPV6
      - TARGET_TLS12ONLYMODERNPHASEOUTCIPHERS_IP
      - TARGET_TLS12ONLYMODERNPHASEOUTCIPHERS_IPV6
      - TARGET_TLS13ONLYDIFFIPV4IPV6_IP
      - TARGET_TLS13ONLYDIFFIPV4IPV6_IPV6
      - TARGET_TLS13ONLYCLIENTCIPHERORDER_IP
      - TARGET_TLS13ONLYCLIENTCIPHERORDER_IPV6
      - TARGET_TLS1213_IP
      - TARGET_TLS1213_IPV6
      - TARGET_TLS1213TLSCOMPRESSION_IP
      - TARGET_TLS1213TLSCOMPRESSION_IPV6
      - TARGET_TLS13ONLY_IP
      - TARGET_TLS13ONLY_IPV6
      - TARGET_TLS130RTT_IP
      - TARGET_TLS130RTT_IPV6
      - TARGET_TLS13INVALIDOCSP_IP
      - TARGET_TLS13INVALIDOCSP_IPV6
      - TARGET_TLS13ONLYIPV4ONLY_IP
      - TARGET_TLS13ONLYIPV4ONLY_IPV6
      - TARGET_TLS13ONLYIPV6ONLY_IP
      - TARGET_TLS13ONLYIPV6ONLY_IPV6

  # An NSD authoratitive container responsible for the tk. TLD zone
  master:
    build:
      context: dns/master
      network: host
    tmpfs: /tmp
    dns: ${RESOLVER_IP}
    volumes:
      # Allow the container to execute Docker commands on the parent container to publish a DS record
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      test_net:
        ipv4_address: ${MASTER_IP}
        ipv6_address: ${MASTER_IPV6}
    depends_on:
      - nsdbase
      - root
    environment:
      - OWN_IP=${MASTER_IP}
      - ROOT_IP=${ROOT_IP}
      - ROOT_IPV6=${ROOT_IPV6}
      - SUB_MASTER_IP=${SUB_MASTER_IP}
      - SUB_MASTER_IPV6=${SUB_MASTER_IPV6}
      - SUB_MASTER2_IP=${SUB_MASTER2_IP}
      - SUB_MASTER2_IPV6=${SUB_MASTER2_IPV6}
      - ROLE=master
      - OTHER_IP=${MASTER2_IP}
  master2:
    build:
      context: dns/master
      network: host
    tmpfs: /tmp
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${MASTER2_IP}
        ipv6_address: ${MASTER2_IPV6}
    depends_on:
      - nsdbase
      - root
    environment:
      - OWN_IP=${MASTER2_IP}
      - ROOT_IP=${ROOT_IP}
      - ROOT_IPV6=${ROOT_IPV6}
      - SUB_MASTER_IP=${SUB_MASTER_IP}
      - SUB_MASTER_IPV6=${SUB_MASTER_IPV6}
      - SUB_MASTER2_IP=${SUB_MASTER2_IP}
      - SUB_MASTER2_IPV6=${SUB_MASTER2_IPV6}
      - ROLE=slave
      - OTHER_IP=${MASTER_IP}

  # An NSD root container that serves the root (.) zone an delegates the tk. zone to 'master'
  root:
    build:
      context: dns/root
      network: host
    tmpfs: /tmp
    dns: ${RESOLVER_IP}
    networks:
      test_net:
        ipv4_address: ${ROOT_IP}
        ipv6_address: ${ROOT_IPV6}
    depends_on:
      - nsdbase
    environment:
      - OWN_IP=${ROOT_IP}
      - OWN_IPV6=${ROOT_IPV6}
      - MASTER_IP=${MASTER_IP}
      - MASTER_IPV6=${MASTER_IPV6}
      - MASTER2_IP=${MASTER2_IP}
      - MASTER2_IPV6=${MASTER2_IPV6}


  # --------------------------------------------------------------------------
  #     CONTAINERS THAT SERVE ONLY TO PRODUCE BASE DOCKER IMAGES FOR USE
  #                BY CONTAINERS DEFINED ABOVE THIS POINT
  # --------------------------------------------------------------------------


  # A base image with handy tools
  devbase:
    image: devbase
    build:
      context: devbase
      network: host
    # The entrypoint overrides nsd -d in the Dockerfile because
    # we want this container to quit immediately and just be used as
    # a base image for the actual NSD containers. This is a bit of a hack
    # to make docker-compose pre-create a common image to be used by
    # containers that it will deploy.
    entrypoint: /bin/sleep infinity

  # A base image for the NSD containers
  nsdbase:
    image: nsdbase
    build:
      context: dns/nsdbase
      network: host
    # The entrypoint overrides nsd -d in the Dockerfile because
    # we want this container to quit immediately and just be used as
    # a base image for the actual NSD containers. This is a bit of a hack
    # to make docker-compose pre-create a common image to be used by
    # containers that it will deploy.
    entrypoint: /bin/sleep infinity
    depends_on:
      - devbase

  # A base image for the app
  appbase:
    image: ${BASE_IMAGE}
    build:
      context: ../..
      dockerfile: docker/Dockerfile
      network: host
    # The entrypoint overrides nsd -d in the Dockerfile because
    # we want this container to quit immediately and just be used as
    # a base image for the actual NSD containers. This is a bit of a hack
    # to make docker-compose pre-create a common image to be used by
    # containers that it will deploy.
    entrypoint: /bin/sleep infinity

  # A base image for target servers
  targetbase:
    image: targetbase
    build:
      context: targetbase
      network: host
    entrypoint: /bin/sleep infinity


networks:
  test_net:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
      - subnet: ${SUBNETV4}
      - subnet: ${SUBNETV6}
    #internal: true
